#lang planet neil/sicp
(define (filtered-accumulate combiner filter null-value term a next b)
  (cond
    ((> a b) null-value)
    ((filter a)
     (combiner (term a)
               (filtered-accumulate combiner filter null-value term (next a) next b)))
    (else (filtered-accumulate combiner filter null-value term (next a) next b))))
(define (filtered-accumulate2 combiner filter null-value term a next b)
  (define (iter filter a result)
    (cond
      ((> a b) result)
      ((filter a) (iter filter (next a) (combiner (term a) result)))
      (else (iter filter (next a) result))))
  (iter filter a null-value))
(define (prime? n)
  (define (square n) (* n n))
  (define (smallest-divisor n) (find-divisor n 2))
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1)))))
  (define (divides? a b) (= (remainder b a) 0))
  (= n (smallest-divisor n)))
(define (133a a b)
  (define (plus a b) (+ a b))
  (define (inc n) (+ n 1))
  (define (filter n) (prime? n))
  (define (square a) (* a a))
  (filtered-accumulate plus filter 0 square a inc b))
;  (filtered-accumulate2 plus filter 0 square a inc b))
;(133a 1 10)
(define (133b n)
  (define (multiply a b) (* a b))
  (define (inc n) (+ n 1))
  (define (identity n) n)
  (define (filter k)
    (= (gcd k n) 1)
    )
  (filtered-accumulate multiply filter 1 identity 1 inc n))
;  (filtered-accumulate2 multiply filter 1 identity 1 inc n))
(133b 10)